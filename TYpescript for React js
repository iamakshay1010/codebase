TYpescript for React js

//=====React hooks

//——useref hook
const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
const inputRef = useRef<HTMLInputElement>(null);


//———react objects
type UserType = {
  sessionId: number;
  name: string;
};
 const [user, setUser] = useState<UserType | null>(null);

  const [dragDropList1, setDragDropList1] = useState<string>("hello there");

  const [dragDropList1, setDragDropList1] = useState<ListItem[]>([]);




//====component
const MyComponent: React.FC = () => {}

const Widget: React.FC<WidgetProps> = ({ id, onRemoveItem, component: Item }) => { }

——————————————————
const originalItems = ["a", "b", "c", "d", "f"];
const [items, setItems] = useState<string[]>(originalItems);

—2——————————————————
const initialLayouts = {
  lg: [
    { i: "a", x: 0, y: 0, w: 20, h: 4, moved: false, static: false },
    { i: "b", x: 0, y: 0, w: 6, h: 4, moved: false, static: false },
    { i: "c", x: 6, y: 0, w: 6, h: 4, moved: false, static: false },
    { i: "d", x: 0, y: 4, w: 4, h: 4, moved: false, static: false },
    { i: "f", x: 4, y: 4, w: 10, h: 4, moved: false, static: false }
  ]
};

const [layouts, setLayouts] = useState<{ [key: string]: LayoutItem[] }>(
    getFromLS("layouts") || initialLayouts
  );


—3————————————array with initalized values—————
type ListItem = {
  id: string;
  label: string;
  checked?: boolean;
};


function Custome(props: any) {
  const listItems: ListItem[] = [
    { id: "1", label: "Steve" },
    { id: "2", label: "Will" },
    { id: "3", label: "Lucas" },
    { id: "4", label: "Mike" },
    { id: "5", label: "Dustin" },
  ];

  const [dragDropList, setDragDropList] = useState<ListItem[]>(dummyData[0]);
}



//=====fetching data====starts

async function getData() {
  const res = await fetch("https://jsonplaceholder.typicode.com/posts");

  if (!res.ok) {
    throw new Error("Failed to fetch data");
  }

  return res.json();
}
—————————————————
const PostList = async () => {
  const data: PostProps[] = await getData();
  return (
    <div className="postList">
      {/* <PostCard title="post title" body="post desc" /> */}

      {data.map((post) => (
        <PostCard key={post.id} {...post} />
      ))}
    </div>
  );
};


//======fetching data====ends






//======fuctions to use====starts

const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log(e.target.value);
  };

const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    console.log("Searched!");
  };

const handleDelete = (e: React.MouseEvent<HTMLButtonElement>, id: number) => {
    e.preventDefault();
    console.log(`Post ${id} has been deleted!`);
  };

//======fuctions to use====ends


//==========passing props to fuction===========================================starts
interface AddListProps {
  items: string[];
  onRemoveItem: (item: string) => void;
  onAddItem: (item: string) => void;
  originalItems: string[];
}
—————————————————
export default function AddList({items,onRemoveItem,onAddItem,originalItems}: AddListProps) {}

//——2————————————————
interface WidgetProps {
  id: string;
  onRemoveItem: (id: string) => void;
  component: React.ElementType;
}
const Widget: React.FC<WidgetProps> = ({ id, onRemoveItem, component: Item }) => { }
//——3———————————————
//==========passing props to fuction==ends
