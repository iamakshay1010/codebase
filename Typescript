Typescript

resource:
https://www.tutorialsteacher.com/typescript/typescript-array

https://stackoverflow.com/questions/30689094/is-it-possible-to-use-es5-javascript-with-angular-2-instead-of-typescript

https://blog.thoughtram.io/angular/2015/05/09/writing-angular-2-code-in-es5.html
https://blog.thoughtram.io/angular/2015/03/27/building-a-zippy-component-in-angular-2.html

https://github.com/thoughtram/angular-zippy

—————————Arrays——————————————————————————

let fruits: string[] = ['Apple', 'Orange', 'Banana'];
let fruits: Array<string> = ['Apple', 'Orange', 'Banana'];

let fruits: Array<string>;
fruits = ['Apple', 'Orange', 'Banana']; 

let ids: Array<number>;
ids = [23, 34, 100, 124, 44];

let values: Array<string | number> = ['Apple', 2, 'Orange', 3, 4, 'Banana']; 

hero: Hero = {
    id: 1,
    name: 'Windstorm',
  };

selectedHero?: Hero; 
heroes: Hero[] = [];

————————
function Greet(greeting: string, ...names: string[]) {
    return greeting + " " + names.join(", ") + "!";
}

Greet("Hello", "Steve", "Bill"); // returns "Hello Steve, Bill!"

Greet("Hello");// returns "Hello !"

  data: any
  private req: any
  url: string = '/getData/'

this.data = data.json() as [any]
—————————Any——————————————————————————

let something: any = "Hello World!"; 
let akshay:any =“im akshay”;
something = 23;
something = true;

Void

function sayHi(): void { 
    console.log('Hi!')
} 
 
let speech: void = sayHi(); 
———————————————————————————————————
function sum(a: number, b: number )
{
    return a + b;    
}
var total: number = sum(10,20); // OK
var str: string = sum(10,20); // Compiler Error 
———————————————————————————————————
Type Assertion in TypeScript(checks the type of a variable )

let code: any = 123; 
let employeeCode = <number> code; 
console.log(typeof(employeeCode)); //Output: number
—————
let employee = { };
employee.name = "John"; //Compiler Error: Property 'name' does not exist on type '{}'
employee.code = 123; //Compiler Error: Property 'code' does not exist on type '{}'
—————

interface Employee { 
    name: string; 
    code: number; 
} 

let employee = <Employee> { }; 
employee.name = "John"; // OK
employee.code = 123; // OK
———————————if else————————————————————————
let let x: number = 10, y = 20;

if (x > y) 
{    console.log('x is greater than y.');
} 
else
{   console.log('x is less than or equal to y.'); //This will be executed
}

———————————Functions————————————————————————
function Sum(x: number, y: number) : number {
    return x + y;
}

Sum(2,3); // returns 5
————————
function Greet(greeting: string, name: string ) : string {
    return greeting + ' ' + name + '!';
}

Greet('Hello','Steve');//OK, returns "Hello Steve!"
Greet('Hi'); // Compiler Error: Expected 2 arguments, but got 1.
Greet('Hi','Bill','Gates'); //Compiler Error: Expected 2 arguments,
————————
function Greet(greeting: string, name?: string ) : string {
    return greeting + ' ' + name + '!';
}

Greet('Hello','Steve');//OK, returns "Hello Steve!"
Greet('Hi'); // OK, returns "Hi undefined!".
Greet('Hi','Bill','Gates'); //Compiler Error: Expected 2 arguments, but got 3.
———————
function Greet(name: string, greeting: string = "Hello") : string {
    return greeting + ' ' + name + '!';
}

Greet('Steve');//OK, returns "Hello Steve!"
Greet('Steve', 'Hi'); // OK, returns "Hi Steve!".
Greet('Bill'); //OK, returns "Hello Bill!"

——————function to accept any—————
function add(a:string, b:string):string;

function add(a:number, b:number): number;

function add(a: any, b:any): any {
    return a + b;
}

add("Hello ", "Steve"); // returns "Hello Steve" 
add(10, 20); // returns 30 


——————————Arrow—Functions————————————————————————
let sum = (x: number, y: number) => x + y;
sum(3, 4); //returns 7

——————————Arrow—Functions—in-class———————————————————————
class Employee {
    empCode: number;
    empName: string;

    constructor(code: number, name: string) {
        this.empName = name;
        this.empCode = code;
    }

    display = () => console.log(this.empCode +' ' + this.empName)
}
let emp = new Employee(1, 'Ram');
emp.display();


——————————class———————————————————————
class Employee {
    empCode: number;
    empName: string;

    constructor(code: number, name: string) {
            this.empName = name;
            this.empCode = code;
    }

    getSalary() : number {
        return 10000;
    }
}

style={{ color: '#2f5bcf', marginRight: '44px',fontFamily: 'FiraSans' }}









